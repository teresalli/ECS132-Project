knitr::opts_chunk$set(echo = TRUE)
generateTime <- function(ipd, len) {
time <- numeric(len)
time[1] = 0
for (i in (2:len)){
time[i] = time[i-1] + ipd[i-1]
}
return(time)
}
generateProb1 <- function (bufferNum) {
bufferSize = 20
currbuffer = bufferNum
ipdSource <- rexp(50)
ipdSend <- rexp(50)
ipdTime <- generateTime(ipdSource, 51)
currTime = ipdTime[bufferNum]
min = min(ipdSend)
max = max(ipdSend)
med = median(ipdSend)
underflow = 0
overflow = 0
index = bufferNum + 1
for (i in (1:32)) {
currTime = currTime + ipdSend[i] # update time
# Update the state of the buffer depending on the number of arrivals during that time.
if (currTime <= ipdTime[index]) {
currbuffer = currbuffer - 1
if (currbuffer < 1){
underflow = 1
break
}
} else {
currbuffer = currbuffer + 1
if (currbuffer > bufferSize){
overflow = 1
break
}
}
index = index + 1
}
return(c(underflow,overflow))
}
generateProb2 <- function (bufferNum) {
bufferSize = 20
currbuffer = bufferNum
ipdSource <- runif(50, 0, 1)
ipdSend <- runif(50, 0, 1)
ipdTime <- generateTime(ipdSource, 51)
currTime = ipdTime[bufferNum]
min = min(ipdSend)
max = max(ipdSend)
med = median(ipdSend)
underflow = 0
overflow = 0
index = bufferNum + 1
for (i in (1:32)) {
currTime = currTime + ipdSend[i] # update time
# Update the state of the buffer depending on the number of arrivals during that time.
if (currTime <= ipdTime[index]) {
currbuffer = currbuffer - 1
if (currbuffer < 1){
underflow = 1
break
}
} else {
currbuffer = currbuffer + 1
if (currbuffer > bufferSize){
overflow = 1
break
}
}
index = index + 1
}
return(c(underflow,overflow))
}
simulate <- function (i) {
probsUe <- numeric(1000)
probsOe <- numeric(1000)
for (t in (1:1000)) {
underflow = 0
overflow = 0
count = 0
output <- generateProb1(i)
underflow = underflow + output[1]
overflow = overflow + output[2]
count = count + 1
probsUe[t] = underflow/count
probsOe[t] = overflow/count
}
return(c(mean(probsUe), mean(probsOe)))
}
simulate2 <- function (i) {
probsUu <- numeric(1000)
probsOu <- numeric(1000)
for (t in (1:1000)) {
underflow = 0
overflow = 0
count = 0
output <- generateProb2(i)
underflow = underflow + output[1]
overflow = overflow + output[2]
count = count + 1
probsUu[t] = underflow/count
probsOu[t] = overflow/count
}
return(c(mean(probsUu), mean(probsOu)))
}
overexp <- numeric(5)
underexp <- numeric(5)
overunif <- numeric(5)
underunif <- numeric(5)
temp = simulate(2)
underexp[1] = temp[1]
overexp[1] = temp[2]
temp = simulate(6)
underexp[2] = temp[1]
overexp[2] = temp[2]
temp = simulate(10)
underexp[3] = temp[1]
overexp[3] = temp[2]
temp = simulate(14)
underexp[4] = temp[1]
overexp[4] = temp[2]
temp = simulate(18)
underexp[5] = temp[1]
overexp[5] = temp[2]
temp = simulate2(2)
underunif[1] = temp[1]
overunif[1] = temp[2]
temp = simulate2(6)
underunif[2] = temp[1]
overunif[2] = temp[2]
temp = simulate2(10)
underunif[3] = temp[1]
overunif[3] = temp[2]
temp = simulate2(14)
underunif[4] = temp[1]
overunif[4] = temp[2]
temp = simulate2(18)
underunif[5] = temp[1]
overunif[5] = temp[2]
#exponential
c(min(underexp),max(underexp))
min(overexp)
max(underexp)
min(underexp)
max(underexp)
generateTime <- function(ipd, len) {
time <- numeric(len)
time[1] = 0
for (i in (2:len)){
time[i] = time[i-1] + ipd[i-1]
}
return(time)
}
generateProb1 <- function (bufferNum) {
bufferSize = 20
currbuffer = bufferNum
ipdSource <- rexp(50)
ipdSend <- rexp(50)
ipdTime <- generateTime(ipdSource, 51)
currTime = ipdTime[bufferNum]
min = min(ipdSend)
max = max(ipdSend)
med = median(ipdSend)
underflow = 0
overflow = 0
index = bufferNum + 1
for (i in (1:32)) {
currTime = currTime + ipdSend[i] # update time
# Update the state of the buffer depending on the number of arrivals during that time.
if (currTime <= ipdTime[index]) {
currbuffer = currbuffer - 1
if (currbuffer < 1){
underflow = 1
break
}
} else {
currbuffer = currbuffer + 1
if (currbuffer > bufferSize){
overflow = 1
break
}
}
index = index + 1
}
return(c(underflow,overflow))
}
generateProb2 <- function (bufferNum) {
bufferSize = 20
currbuffer = bufferNum
ipdSource <- runif(50, 0, 1)
ipdSend <- runif(50, 0, 1)
ipdTime <- generateTime(ipdSource, 51)
currTime = ipdTime[bufferNum]
min = min(ipdSend)
max = max(ipdSend)
med = median(ipdSend)
underflow = 0
overflow = 0
index = bufferNum + 1
for (i in (1:32)) {
currTime = currTime + ipdSend[i] # update time
# Update the state of the buffer depending on the number of arrivals during that time.
if (currTime <= ipdTime[index]) {
currbuffer = currbuffer - 1
if (currbuffer < 1){
underflow = 1
break
}
} else {
currbuffer = currbuffer + 1
if (currbuffer > bufferSize){
overflow = 1
break
}
}
index = index + 1
}
return(c(underflow,overflow))
}
simulate <- function (i) {
probsUe <- numeric(1000)
probsOe <- numeric(1000)
for (t in (1:1000)) {
underflow = 0
overflow = 0
count = 0
output <- generateProb1(i)
underflow = underflow + output[1]
overflow = overflow + output[2]
count = count + 1
probsUe[t] = underflow/count
probsOe[t] = overflow/count
}
return(c(mean(probsUe), mean(probsOe)))
}
simulate2 <- function (i) {
probsUu <- numeric(1000)
probsOu <- numeric(1000)
for (t in (1:1000)) {
underflow = 0
overflow = 0
count = 0
output <- generateProb2(i)
underflow = underflow + output[1]
overflow = overflow + output[2]
count = count + 1
probsUu[t] = underflow/count
probsOu[t] = overflow/count
}
return(c(mean(probsUu), mean(probsOu)))
}
overexp <- numeric(5)
underexp <- numeric(5)
overunif <- numeric(5)
underunif <- numeric(5)
temp = simulate(2)
underexp[1] = temp[1]
overexp[1] = temp[2]
temp = simulate(6)
underexp[2] = temp[1]
overexp[2] = temp[2]
temp = simulate(10)
underexp[3] = temp[1]
overexp[3] = temp[2]
temp = simulate(14)
underexp[4] = temp[1]
overexp[4] = temp[2]
temp = simulate(18)
underexp[5] = temp[1]
overexp[5] = temp[2]
temp = simulate2(2)
underunif[1] = temp[1]
overunif[1] = temp[2]
temp = simulate2(6)
underunif[2] = temp[1]
overunif[2] = temp[2]
temp = simulate2(10)
underunif[3] = temp[1]
overunif[3] = temp[2]
temp = simulate2(14)
underunif[4] = temp[1]
overunif[4] = temp[2]
temp = simulate2(18)
underunif[5] = temp[1]
overunif[5] = temp[2]
#exponential
#underflow bounds
c(min(underexp),max(underexp))
#overflow bounds
c(min(overexp),max(overexp))
#uniform
#underflow bounds
c(min(underunif),max(underunif))
#overflow bounds
c(min(overunif),max(overunif))
